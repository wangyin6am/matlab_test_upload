clc
clear
%% 初始值
fs = 1000;
space = fs * 0.4;
sleep_table = [0,1,2,3,5];
number_channel = 6;

% 滤波器
Hd = bandpass_window_100;
coeff_eegdata = Hd.Numerator;

Files    = dir(fullfile('data\EEG\'));
Path_RR  = 'data\RR\';
LengthFiles = length(Files);


%%
for j=3:LengthFiles
    x = j-2;
    name = Files(j).name;
    folder = Files(j).folder;
    FilesPathEEG = [folder,'\',name];
    modifiedName = strrep(name, '.edf', '');
    FilesPathRR  = [Path_RR, modifiedName,'_hrv.mat'];
    %% 脑电处理
    [head, data] = edfread(FilesPathEEG);
    eeg_M1 = data(1,:);
    eeg_M2 = data(15,:);
    mean_M1M2 = (eeg_M1 + eeg_M2) ./ 2;
    % FP1 FP2 C3 C4 O1 O2
    eeg  = data([6,8,5,11,3,13],:);
    % 重参考
    eeg  = eeg - mean_M1M2;
    % 滤波
    eeg_filter = filtfilt(coeff_eegdata,1,eeg')';
    
    %% RR
    Res = load(FilesPathRR);
    t_RR = Res.Res.HRV.Data.T_RR;
    start_time = Res.Res.CNT.CntGen.time;
    start_time = calcTime(start_time);
    t_RR = t_RR - start_time;
    point_RR = t_RR * fs;
    point_RR_left  = point_RR - space;
    point_RR_right = point_RR + space;
    % 删掉长度不够的
    remove_index   = [find(point_RR_left <= 0) find(point_RR_right >= size(eeg,2))];
    point_RR_left(remove_index,:) = [];
    point_RR_right(remove_index,:) = [];
    
    %% HEP
    HEP = zeros(number_channel, 2*space+1);
    for ii = 1:size(point_RR_left,1)
        eeg_split = eeg_filter(:,point_RR_left(ii):point_RR_right(ii));
        HEP_split{ii,1}   = eeg_split;
        HEP = HEP + eeg_split;
    end
    HEP = HEP / size(point_RR_left,1);


    
    %% 保存
    people.name{x,1} = name;
    people.HEP_split{x,1} = HEP_split;
    people.HEP{x,1} = HEP;

end




%% 将HH:MM:SS时间转换为秒数时间
function results = calcTime(time)
        str = strsplit(time,'.');
        x1 = str2double(str(1));
        x2 = str2double(str(2));
        x3 = str2double(str(3));
        results = x1*3600+x2*60+x3;
end

%% 带通滤波器
function Hd = bandpass_window_100
    %BANDPASS_WINDOW_100 Returns a discrete-time filter object.
    
    %
    % MATLAB Code
    % Generated by MATLAB(R) 7.14 and the Signal Processing Toolbox 6.17.
    %
    %
    
    % FIR Window Bandpass filter designed using the FIR1 function.
    
    % All frequency values are in Hz.
    Fs = 100;  % Sampling Frequency
    
    N    = 300;     % Order
    Fc1  = 0.3;      % First Cutoff Frequency
    Fc2  = 35;       % Second Cutoff Frequency
    flag = 'scale';  % Sampling Flag
    Beta = 0.5;       % Window Parameter
    % Create the window vector for the design algorithm.
    win = kaiser(N+1, Beta);
    % Calculate the coefficients using the FIR1 function.
    b  = fir1(N, [Fc1 Fc2]/(Fs/2), 'bandpass', win, flag);  
    Hd = dfilt.dffir(b);
end